from django.db import models
from accounts.models import User
from main.models import Subject, Lesson, Test, Option, Task, Question
from django.utils.translation import gettext_lazy as _


# UserSubject model
class UserSubject(models.Model):
    user = models.ForeignKey(
        User, on_delete=models.CASCADE,
        verbose_name=_('“ö–æ–ª–¥–∞–Ω—É—à—ã'), related_name="user_subjects")
    subject = models.ForeignKey(
        Subject, on_delete=models.CASCADE,
        verbose_name=_('–ü”ô–Ω'), related_name="user_subjects"
    )
    total_percent = models.PositiveSmallIntegerField(_('–ñ–∞–ª–ø—ã “±–ø–∞–π –ø–∞–π—ã–∑—ã'), default=0)
    completed = models.BooleanField(_('–û—Ä—ã–Ω–¥–∞–ª–¥—ã'), default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'subject')
        verbose_name = _('“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –ø”ô–Ω—ñ')
        verbose_name_plural = _('“ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã“£ –ø”ô–Ω–¥–µ—Ä—ñ')

    def __str__(self):
        return f"{self.user} - {self.subject.title}"


# UserLesson model
class UserLesson(models.Model):
    user_subject = models.ForeignKey(
        UserSubject, on_delete=models.CASCADE,
        verbose_name=_('“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –ø”ô–Ω—ñ'), related_name="user_lessons")
    lesson = models.ForeignKey(
        Lesson, on_delete=models.CASCADE,
        verbose_name=_('–°–∞–±–∞“õ'), related_name="user_lessons"
    )
    lesson_score = models.DecimalField(_('–°–∞–±–∞“õ—Ç—ã“£ –±–∞–ª–ª—ã'), max_digits=5, decimal_places=2, default=0)
    completed = models.BooleanField(_('–û—Ä—ã–Ω–¥–∞–ª–¥—ã'), default=False)
    is_open = models.BooleanField(_('–ê—à—ã“õ —Å–∞–±–∞“õ'), default=False)
    completed_at = models.DateTimeField(_('–û—Ä—ã–Ω–¥–∞–ª“ì–∞–Ω —É–∞“õ—ã—Ç—ã'), blank=True, null=True)

    class Meta:
        unique_together = ('user_subject', 'lesson')
        verbose_name = _('“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ —Å–∞–±–∞“ì—ã')
        verbose_name_plural = _('“ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã“£ —Å–∞–±–∞“õ—Ç–∞—Ä—ã')

    def __str__(self):
        return f"{self.user_subject.user} - {self.lesson.title} - {'–û—Ä—ã–Ω–¥–∞–ª–¥—ã' if self.completed else '–ü—Ä–æ—Ü–µ—Å—Å—Ç–µ'}"


# UserTask model
class UseTask(models.Model):
    user = models.ForeignKey(
        User, on_delete=models.CASCADE,
        related_name='user_tasks', verbose_name=_('“ö–æ–ª–¥–∞–Ω—É—à—ã')
    )
    user_lesson = models.ForeignKey(
        UserLesson, on_delete=models.CASCADE, related_name='user_tasks',
        verbose_name=_('“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ —Å–∞–±–∞“ì—ã')
    )
    task = models.ForeignKey(
        Task, on_delete=models.CASCADE,
        related_name='user_tasks', verbose_name=_('–¢–∞–ø—Å—ã—Ä–º–∞')
    )
    submission = models.FileField(_('–¢–∞–ø—Å—ã—Ä–º–∞'), upload_to='main/subject/user/tasks/')
    grade = models.PositiveSmallIntegerField(_('–ë–∞–ª–ª'), default=0)
    feedback = models.TextField(_('–ü—ñ–∫—ñ—Ä'), blank=True, null=True)
    submitted_at = models.DateTimeField(auto_now_add=True)
    is_done = models.BooleanField(_('–û—Ä—ã–Ω–¥–∞–ª–¥—ã'), default=False)

    def __str__(self):
        return f"{self.user} {self.task.title} —Ç–∞“õ—ã—Ä—ã–±—ã–Ω–¥–∞“ì—ã —Ç–∞–ø—Å—ã—Ä–º–∞"


    class Meta:
        verbose_name = _('“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ —Ç–∞–ø—Å—ã—Ä–º–∞—Å—ã')
        verbose_name_plural = _('“ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã“£ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä—ã')


# üßë‚Äçüéì UserTest model
class UserTest(models.Model):
    user = models.ForeignKey(
        User, on_delete=models.CASCADE,
        related_name='user_tests', verbose_name=_('“ö–æ–ª–¥–∞–Ω—É—à—ã')
    )
    user_lesson = models.ForeignKey(
        UserLesson, on_delete=models.CASCADE, related_name='user_tests',
        verbose_name=_('“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ —Å–∞–±–∞“ì—ã')
    )
    test = models.ForeignKey(
        Test, on_delete=models.CASCADE,
        related_name='user_tests', verbose_name=_('–¢–µ—Å—Ç')
    )
    score = models.PositiveIntegerField(_('–ë–∞–ª–ª'), default=0)
    completed = models.BooleanField(_('–ê—è“õ—Ç–∞–ª–¥—ã'), default=False)

    def __str__(self):
        return f"{self.user.username} - {self.test.title} ({self.score} “±–ø–∞–π)"

    class Meta:
        verbose_name = _('“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ —Ç–µ—Å—Ç—ñ')
        verbose_name_plural = _('“ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã“£ —Ç–µ—Å—Ç—Ç–µ—Ä—ñ')


# UserAnswer model
class UserAnswer(models.Model):
    user_test = models.ForeignKey(
        UserTest, on_delete=models.CASCADE,
        related_name='answers', verbose_name=_('“ö–æ–ª–¥–∞–Ω—É—à—ã —Ç–µ—Å—Ç—ñ')
    )
    question = models.ForeignKey(Question, on_delete=models.CASCADE, verbose_name=_('–°“±—Ä–∞“õ'), blank=True, null=True)
    answers = models.ManyToManyField(Option, verbose_name=_('–ñ–∞—É–∞–ø—Ç–∞—Ä'))
    score = models.PositiveSmallIntegerField(_('–ë–∞–ª–ª'), default=0)


    class Meta:
        verbose_name = _('“ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ –∂–∞—É–∞–±—ã')
        verbose_name_plural = _('“ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã“£ –∂–∞—É–∞–ø—Ç–∞—Ä—ã')
